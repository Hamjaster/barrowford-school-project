

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."role" AS ENUM (
    'admin',
    'staff_admin',
    'staff',
    'student',
    'parent'
);


ALTER TYPE "public"."role" OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."admins" (
    "id" bigint NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"(),
    "auth_user_id" "uuid" NOT NULL,
    "first_name" "text",
    "last_name" "text",
    "email" "text" NOT NULL,
    "status" "text" DEFAULT 'active'::"text",
    CONSTRAINT "admins_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'inactive'::"text"])))
);


ALTER TABLE "public"."admins" OWNER TO "postgres";


ALTER TABLE "public"."admins" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."admins_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."audit_logs" (
    "id" bigint NOT NULL,
    "action" "text" NOT NULL,
    "entity_type" "text" NOT NULL,
    "entity_id" bigint NOT NULL,
    "old_value" "jsonb",
    "new_value" "jsonb",
    "created_at" timestamp without time zone DEFAULT "now"(),
    "actor_id" bigint NOT NULL,
    "actor_role" "public"."role" NOT NULL
);


ALTER TABLE "public"."audit_logs" OWNER TO "postgres";


ALTER TABLE "public"."audit_logs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."auditlogs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."classes" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "year_group_id" bigint,
    "created_at" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."classes" OWNER TO "postgres";


ALTER TABLE "public"."classes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."classes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."moderations" (
    "id" bigint NOT NULL,
    "student_id" bigint,
    "entity_type" "text" NOT NULL,
    "old_content" json,
    "new_content" json,
    "status" "text" DEFAULT 'pending'::"text" NOT NULL,
    "moderated_at" timestamp without time zone,
    "created_at" timestamp without time zone DEFAULT "now"(),
    "old_attachment" "text",
    "new_attachment" "text",
    "action_type" "text" DEFAULT 'create'::"text",
    "rejection_reason" "text",
    "entity_id" bigint,
    "year_group_id" bigint,
    "class_id" bigint,
    "entity_title" "text" DEFAULT 'The Party :)'::"text" NOT NULL,
    CONSTRAINT "moderations_action_type_check" CHECK (("action_type" = ANY (ARRAY['create'::"text", 'update'::"text", 'delete'::"text"]))),
    CONSTRAINT "moderations_status_check" CHECK (("status" = ANY (ARRAY['pending'::"text", 'approved'::"text", 'rejected'::"text"])))
);


ALTER TABLE "public"."moderations" OWNER TO "postgres";


ALTER TABLE "public"."moderations" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."moderations_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."page_types" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."page_types" OWNER TO "postgres";


ALTER TABLE "public"."page_types" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."page_types_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."parents" (
    "id" bigint NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"(),
    "auth_user_id" "uuid",
    "first_name" "text",
    "last_name" "text",
    "email" "text",
    "password" "text",
    "status" "text" DEFAULT 'active'::"text",
    CONSTRAINT "parents_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'inactive'::"text"])))
);


ALTER TABLE "public"."parents" OWNER TO "postgres";


ALTER TABLE "public"."parents" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."parents_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."parent_student_relationships" (
    "id" bigint NOT NULL,
    "parent_id" bigint,
    "student_id" bigint,
    "created_at" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."parent_student_relationships" OWNER TO "postgres";


ALTER TABLE "public"."parent_student_relationships" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."parent_student_relationship_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."personal_sections" (
    "id" bigint NOT NULL,
    "student_id" bigint,
    "topic_id" bigint,
    "content" "text",
    "created_at" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."personal_sections" OWNER TO "postgres";


ALTER TABLE "public"."personal_sections" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."personal_sections_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."personal_section_topics" (
    "id" bigint NOT NULL,
    "title" "text" NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"(),
    "status" "text" DEFAULT 'active'::"text" NOT NULL,
    "description" "text"
);


ALTER TABLE "public"."personal_section_topics" OWNER TO "postgres";


ALTER TABLE "public"."personal_section_topics" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."personal_section_topics_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."reflection_comments" (
    "id" bigint NOT NULL,
    "reflection_id" bigint NOT NULL,
    "user_id" bigint NOT NULL,
    "comment" "text",
    "created_at" timestamp without time zone DEFAULT "now"(),
    "user_role" "text" NOT NULL,
    "user_name" "text" DEFAULT 'Tom'::"text" NOT NULL
);


ALTER TABLE "public"."reflection_comments" OWNER TO "postgres";


ALTER TABLE "public"."reflection_comments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reflection_comments_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."reflections" (
    "id" bigint NOT NULL,
    "student_id" bigint,
    "year_group_id" bigint,
    "topic_id" bigint,
    "content" "text",
    "attachment_url" "text",
    "status" "text" DEFAULT 'pending'::"text" NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"(),
    "week" "text" DEFAULT 'Week 1'::"text" NOT NULL
);


ALTER TABLE "public"."reflections" OWNER TO "postgres";


ALTER TABLE "public"."reflections" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reflections_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."reflection_topics" (
    "id" bigint NOT NULL,
    "title" "text" NOT NULL,
    "created_by" bigint,
    "is_active" boolean DEFAULT true,
    "created_at" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."reflection_topics" OWNER TO "postgres";


ALTER TABLE "public"."reflection_topics" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reflection_topics_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."staff_admins" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "auth_user_id" "uuid" NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text",
    "email" "text" NOT NULL,
    "password" "text",
    "status" "text" DEFAULT 'active'::"text",
    CONSTRAINT "staff_admins_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'inactive'::"text"])))
);


ALTER TABLE "public"."staff_admins" OWNER TO "postgres";


ALTER TABLE "public"."staff_admins" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."staff_admins_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."staffs" (
    "id" bigint NOT NULL,
    "year_group_id" bigint,
    "class_id" bigint,
    "created_at" timestamp without time zone DEFAULT "now"(),
    "auth_user_id" "uuid" NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text",
    "email" "text" NOT NULL,
    "password" "text",
    "status" "text" DEFAULT 'active'::"text",
    CONSTRAINT "staffs_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'inactive'::"text"])))
);


ALTER TABLE "public"."staffs" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."student_images" (
    "id" bigint NOT NULL,
    "student_id" bigint,
    "year_group_id" bigint,
    "image_url" "text" NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"(),
    "status" "text" DEFAULT 'accepted'::"text" NOT NULL
);


ALTER TABLE "public"."student_images" OWNER TO "postgres";


ALTER TABLE "public"."student_images" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."student_images_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."student_learning_entities" (
    "id" bigint NOT NULL,
    "student_id" bigint,
    "subject_id" bigint,
    "title" "text",
    "description" "text",
    "attachment_url" "text",
    "created_at" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."student_learning_entities" OWNER TO "postgres";


ALTER TABLE "public"."student_learning_entities" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."student_learning_entities_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."student_pages" (
    "id" bigint NOT NULL,
    "student_id" bigint,
    "year_group_id" bigint,
    "page_type_id" bigint,
    "content" "text",
    "created_at" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."student_pages" OWNER TO "postgres";


ALTER TABLE "public"."student_pages" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."student_pages_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."students" (
    "id" bigint NOT NULL,
    "year_group_id" bigint,
    "class_id" bigint,
    "created_at" timestamp without time zone DEFAULT "now"(),
    "dob" timestamp without time zone,
    "profile_photo" "text",
    "hair_color" "text",
    "height" integer,
    "auth_user_id" "uuid" NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text",
    "username" "text" NOT NULL,
    "email" "text" NOT NULL,
    "status" "text" DEFAULT 'active'::"text",
    "current_year_group_id" bigint DEFAULT '1'::bigint NOT NULL,
    CONSTRAINT "students_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'inactive'::"text"])))
);


ALTER TABLE "public"."students" OWNER TO "postgres";


ALTER TABLE "public"."students" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."students_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."subjects" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"(),
    "status" "text" DEFAULT 'active'::"text" NOT NULL
);


ALTER TABLE "public"."subjects" OWNER TO "postgres";


ALTER TABLE "public"."subjects" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."subjects_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."staffs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."teachers_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."year_group_subjects" (
    "id" bigint NOT NULL,
    "year_group_id" bigint NOT NULL,
    "subject_id" bigint NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."year_group_subjects" OWNER TO "postgres";


ALTER TABLE "public"."year_group_subjects" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."year_group_subject_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."year_groups" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "created_at" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."year_groups" OWNER TO "postgres";


ALTER TABLE "public"."year_groups" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."year_groups_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."admins"
    ADD CONSTRAINT "admins_auth_user_id_key" UNIQUE ("auth_user_id");



ALTER TABLE ONLY "public"."admins"
    ADD CONSTRAINT "admins_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."admins"
    ADD CONSTRAINT "admins_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."audit_logs"
    ADD CONSTRAINT "auditlogs_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."classes"
    ADD CONSTRAINT "classes_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."moderations"
    ADD CONSTRAINT "moderations_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."page_types"
    ADD CONSTRAINT "page_types_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."parents"
    ADD CONSTRAINT "parents_auth_user_id_key" UNIQUE ("auth_user_id");



ALTER TABLE ONLY "public"."parents"
    ADD CONSTRAINT "parents_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."parents"
    ADD CONSTRAINT "parents_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."parent_student_relationships"
    ADD CONSTRAINT "parent_student_relationship_parent_id_student_id_key" UNIQUE ("parent_id", "student_id");



ALTER TABLE ONLY "public"."parent_student_relationships"
    ADD CONSTRAINT "parent_student_relationship_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."personal_sections"
    ADD CONSTRAINT "personal_sections_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."personal_section_topics"
    ADD CONSTRAINT "personal_section_topics_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."reflection_comments"
    ADD CONSTRAINT "reflection_comments_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."reflections"
    ADD CONSTRAINT "reflections_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."reflection_topics"
    ADD CONSTRAINT "reflection_topics_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."staff_admins"
    ADD CONSTRAINT "staff_admins_auth_user_id_key" UNIQUE ("auth_user_id");



ALTER TABLE ONLY "public"."staff_admins"
    ADD CONSTRAINT "staff_admins_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."staff_admins"
    ADD CONSTRAINT "staff_admins_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."student_images"
    ADD CONSTRAINT "student_images_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."student_learning_entities"
    ADD CONSTRAINT "student_learning_entities_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."student_pages"
    ADD CONSTRAINT "student_pages_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."students"
    ADD CONSTRAINT "students_auth_user_id_key" UNIQUE ("auth_user_id");



ALTER TABLE ONLY "public"."students"
    ADD CONSTRAINT "students_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."students"
    ADD CONSTRAINT "students_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."subjects"
    ADD CONSTRAINT "subjects_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."subjects"
    ADD CONSTRAINT "subjects_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."staffs"
    ADD CONSTRAINT "teachers_auth_user_id_key" UNIQUE ("auth_user_id");



ALTER TABLE ONLY "public"."staffs"
    ADD CONSTRAINT "teachers_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."staffs"
    ADD CONSTRAINT "teachers_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."year_group_subjects"
    ADD CONSTRAINT "year_group_subject_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."year_group_subjects"
    ADD CONSTRAINT "year_group_subject_year_group_id_subject_id_key" UNIQUE ("year_group_id", "subject_id");



ALTER TABLE ONLY "public"."year_groups"
    ADD CONSTRAINT "year_groups_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."year_groups"
    ADD CONSTRAINT "year_groups_pkey" PRIMARY KEY ("id");



CREATE INDEX "idx_admins_auth_user_id" ON "public"."admins" USING "btree" ("auth_user_id");



CREATE INDEX "idx_admins_email" ON "public"."admins" USING "btree" ("email");



CREATE INDEX "idx_moderations_status" ON "public"."moderations" USING "btree" ("status");



CREATE INDEX "idx_moderations_student" ON "public"."moderations" USING "btree" ("student_id");



CREATE INDEX "idx_moderations_year_class" ON "public"."moderations" USING "btree" ("year_group_id", "class_id");



CREATE INDEX "idx_parents_auth_user_id" ON "public"."parents" USING "btree" ("auth_user_id");



CREATE INDEX "idx_parents_email" ON "public"."parents" USING "btree" ("email");



CREATE INDEX "idx_parent_student_relationship_parent" ON "public"."parent_student_relationships" USING "btree" ("parent_id");



CREATE INDEX "idx_parent_student_relationship_student" ON "public"."parent_student_relationships" USING "btree" ("student_id");



CREATE INDEX "idx_reflection_comments_reflection" ON "public"."reflection_comments" USING "btree" ("reflection_id");



CREATE INDEX "idx_reflections_student" ON "public"."reflections" USING "btree" ("student_id");



CREATE INDEX "idx_reflections_student_topic" ON "public"."reflections" USING "btree" ("student_id", "topic_id");



CREATE INDEX "idx_reflections_student_week" ON "public"."reflections" USING "btree" ("student_id", "week");



CREATE INDEX "idx_reflection_topics_active" ON "public"."reflection_topics" USING "btree" ("is_active");



CREATE INDEX "idx_staff_admins_auth_user_id" ON "public"."staff_admins" USING "btree" ("auth_user_id");



CREATE INDEX "idx_staff_admins_email" ON "public"."staff_admins" USING "btree" ("email");



CREATE INDEX "idx_staffs_auth_user_id" ON "public"."staffs" USING "btree" ("auth_user_id");



CREATE INDEX "idx_staffs_email" ON "public"."staffs" USING "btree" ("email");



CREATE INDEX "idx_staffs_year_group_class" ON "public"."staffs" USING "btree" ("year_group_id", "class_id");



CREATE INDEX "idx_student_images_student" ON "public"."student_images" USING "btree" ("student_id");



CREATE INDEX "idx_student_images_student_year" ON "public"."student_images" USING "btree" ("student_id", "year_group_id");



CREATE INDEX "idx_student_learning_entities_student_subject" ON "public"."student_learning_entities" USING "btree" ("student_id", "subject_id");



CREATE INDEX "idx_student_pages_student_year_page" ON "public"."student_pages" USING "btree" ("student_id", "year_group_id", "page_type_id");



CREATE INDEX "idx_students_auth_user_id" ON "public"."students" USING "btree" ("auth_user_id");



CREATE INDEX "idx_students_email" ON "public"."students" USING "btree" ("email");



CREATE INDEX "idx_students_status" ON "public"."students" USING "btree" ("status");



CREATE INDEX "idx_students_year_group_class" ON "public"."students" USING "btree" ("year_group_id", "class_id");



CREATE INDEX "idx_subjects_status" ON "public"."subjects" USING "btree" ("status");



CREATE INDEX "idx_year_group_subject_year" ON "public"."year_group_subjects" USING "btree" ("year_group_id");



ALTER TABLE ONLY "public"."moderations"
    ADD CONSTRAINT "moderations_class_id_fkey" FOREIGN KEY ("class_id") REFERENCES "public"."classes"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."moderations"
    ADD CONSTRAINT "moderations_student_id_fkey" FOREIGN KEY ("student_id") REFERENCES "public"."students"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."moderations"
    ADD CONSTRAINT "moderations_year_group_id_fkey" FOREIGN KEY ("year_group_id") REFERENCES "public"."year_groups"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."parent_student_relationships"
    ADD CONSTRAINT "parent_student_relationship_parent_id_fkey" FOREIGN KEY ("parent_id") REFERENCES "public"."parents"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."parent_student_relationships"
    ADD CONSTRAINT "parent_student_relationship_student_id_fkey" FOREIGN KEY ("student_id") REFERENCES "public"."students"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."personal_sections"
    ADD CONSTRAINT "personal_sections_student_id_fkey" FOREIGN KEY ("student_id") REFERENCES "public"."students"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."personal_sections"
    ADD CONSTRAINT "personal_sections_topic_id_fkey" FOREIGN KEY ("topic_id") REFERENCES "public"."personal_section_topics"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reflection_comments"
    ADD CONSTRAINT "reflection_comments_reflection_id_fkey" FOREIGN KEY ("reflection_id") REFERENCES "public"."reflections"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reflections"
    ADD CONSTRAINT "reflections_student_id_fkey" FOREIGN KEY ("student_id") REFERENCES "public"."students"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reflections"
    ADD CONSTRAINT "reflections_topic_id_fkey" FOREIGN KEY ("topic_id") REFERENCES "public"."reflection_topics"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reflection_topics"
    ADD CONSTRAINT "reflection_topics_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "public"."staffs"("id");



ALTER TABLE ONLY "public"."staffs"
    ADD CONSTRAINT "staffs_class_id_fkey" FOREIGN KEY ("class_id") REFERENCES "public"."classes"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."staffs"
    ADD CONSTRAINT "staffs_year_group_id_fkey" FOREIGN KEY ("year_group_id") REFERENCES "public"."year_groups"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."student_images"
    ADD CONSTRAINT "student_images_student_id_fkey" FOREIGN KEY ("student_id") REFERENCES "public"."students"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."student_images"
    ADD CONSTRAINT "student_images_year_group_id_fkey" FOREIGN KEY ("year_group_id") REFERENCES "public"."year_groups"("id");



ALTER TABLE ONLY "public"."student_learning_entities"
    ADD CONSTRAINT "student_learning_entities_student_id_fkey" FOREIGN KEY ("student_id") REFERENCES "public"."students"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."student_learning_entities"
    ADD CONSTRAINT "student_learning_entities_subject_id_fkey" FOREIGN KEY ("subject_id") REFERENCES "public"."subjects"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."student_pages"
    ADD CONSTRAINT "student_pages_page_type_id_fkey" FOREIGN KEY ("page_type_id") REFERENCES "public"."page_types"("id");



ALTER TABLE ONLY "public"."student_pages"
    ADD CONSTRAINT "student_pages_student_id_fkey" FOREIGN KEY ("student_id") REFERENCES "public"."students"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."student_pages"
    ADD CONSTRAINT "student_pages_year_group_id_fkey" FOREIGN KEY ("year_group_id") REFERENCES "public"."year_groups"("id");



ALTER TABLE ONLY "public"."students"
    ADD CONSTRAINT "students_class_id_fkey" FOREIGN KEY ("class_id") REFERENCES "public"."classes"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."students"
    ADD CONSTRAINT "students_current_year_group_id_fkey" FOREIGN KEY ("current_year_group_id") REFERENCES "public"."year_groups"("id");



ALTER TABLE ONLY "public"."year_group_subjects"
    ADD CONSTRAINT "year_group_subject_subject_id_fkey" FOREIGN KEY ("subject_id") REFERENCES "public"."subjects"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."year_group_subjects"
    ADD CONSTRAINT "year_group_subject_year_group_id_fkey" FOREIGN KEY ("year_group_id") REFERENCES "public"."year_groups"("id") ON DELETE CASCADE;



CREATE POLICY "Enable read access for authenticated users" ON "public"."year_groups" FOR SELECT TO "authenticated" USING (true);





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";








































































































































































GRANT ALL ON TABLE "public"."admins" TO "anon";
GRANT ALL ON TABLE "public"."admins" TO "authenticated";
GRANT ALL ON TABLE "public"."admins" TO "service_role";



GRANT ALL ON SEQUENCE "public"."admins_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."admins_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."admins_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."audit_logs" TO "anon";
GRANT ALL ON TABLE "public"."audit_logs" TO "authenticated";
GRANT ALL ON TABLE "public"."audit_logs" TO "service_role";



GRANT ALL ON SEQUENCE "public"."auditlogs_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."auditlogs_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."auditlogs_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."classes" TO "anon";
GRANT ALL ON TABLE "public"."classes" TO "authenticated";
GRANT ALL ON TABLE "public"."classes" TO "service_role";



GRANT ALL ON SEQUENCE "public"."classes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."classes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."classes_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."moderations" TO "anon";
GRANT ALL ON TABLE "public"."moderations" TO "authenticated";
GRANT ALL ON TABLE "public"."moderations" TO "service_role";



GRANT ALL ON SEQUENCE "public"."moderations_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."moderations_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."moderations_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."page_types" TO "anon";
GRANT ALL ON TABLE "public"."page_types" TO "authenticated";
GRANT ALL ON TABLE "public"."page_types" TO "service_role";



GRANT ALL ON SEQUENCE "public"."page_types_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."page_types_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."page_types_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."parents" TO "anon";
GRANT ALL ON TABLE "public"."parents" TO "authenticated";
GRANT ALL ON TABLE "public"."parents" TO "service_role";



GRANT ALL ON SEQUENCE "public"."parents_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."parents_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."parents_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."parent_student_relationships" TO "anon";
GRANT ALL ON TABLE "public"."parent_student_relationships" TO "authenticated";
GRANT ALL ON TABLE "public"."parent_student_relationships" TO "service_role";



GRANT ALL ON SEQUENCE "public"."parent_student_relationship_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."parent_student_relationship_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."parent_student_relationship_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."personal_sections" TO "anon";
GRANT ALL ON TABLE "public"."personal_sections" TO "authenticated";
GRANT ALL ON TABLE "public"."personal_sections" TO "service_role";



GRANT ALL ON SEQUENCE "public"."personal_sections_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."personal_sections_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."personal_sections_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."personal_section_topics" TO "anon";
GRANT ALL ON TABLE "public"."personal_section_topics" TO "authenticated";
GRANT ALL ON TABLE "public"."personal_section_topics" TO "service_role";



GRANT ALL ON SEQUENCE "public"."personal_section_topics_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."personal_section_topics_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."personal_section_topics_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."reflection_comments" TO "anon";
GRANT ALL ON TABLE "public"."reflection_comments" TO "authenticated";
GRANT ALL ON TABLE "public"."reflection_comments" TO "service_role";



GRANT ALL ON SEQUENCE "public"."reflection_comments_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."reflection_comments_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reflection_comments_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."reflections" TO "anon";
GRANT ALL ON TABLE "public"."reflections" TO "authenticated";
GRANT ALL ON TABLE "public"."reflections" TO "service_role";



GRANT ALL ON SEQUENCE "public"."reflections_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."reflections_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reflections_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."reflection_topics" TO "anon";
GRANT ALL ON TABLE "public"."reflection_topics" TO "authenticated";
GRANT ALL ON TABLE "public"."reflection_topics" TO "service_role";



GRANT ALL ON SEQUENCE "public"."reflection_topics_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."reflection_topics_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reflection_topics_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."staff_admins" TO "anon";
GRANT ALL ON TABLE "public"."staff_admins" TO "authenticated";
GRANT ALL ON TABLE "public"."staff_admins" TO "service_role";



GRANT ALL ON SEQUENCE "public"."staff_admins_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."staff_admins_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."staff_admins_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."staffs" TO "anon";
GRANT ALL ON TABLE "public"."staffs" TO "authenticated";
GRANT ALL ON TABLE "public"."staffs" TO "service_role";



GRANT ALL ON TABLE "public"."student_images" TO "anon";
GRANT ALL ON TABLE "public"."student_images" TO "authenticated";
GRANT ALL ON TABLE "public"."student_images" TO "service_role";



GRANT ALL ON SEQUENCE "public"."student_images_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."student_images_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."student_images_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."student_learning_entities" TO "anon";
GRANT ALL ON TABLE "public"."student_learning_entities" TO "authenticated";
GRANT ALL ON TABLE "public"."student_learning_entities" TO "service_role";



GRANT ALL ON SEQUENCE "public"."student_learning_entities_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."student_learning_entities_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."student_learning_entities_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."student_pages" TO "anon";
GRANT ALL ON TABLE "public"."student_pages" TO "authenticated";
GRANT ALL ON TABLE "public"."student_pages" TO "service_role";



GRANT ALL ON SEQUENCE "public"."student_pages_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."student_pages_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."student_pages_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."students" TO "anon";
GRANT ALL ON TABLE "public"."students" TO "authenticated";
GRANT ALL ON TABLE "public"."students" TO "service_role";



GRANT ALL ON SEQUENCE "public"."students_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."students_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."students_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."subjects" TO "anon";
GRANT ALL ON TABLE "public"."subjects" TO "authenticated";
GRANT ALL ON TABLE "public"."subjects" TO "service_role";



GRANT ALL ON SEQUENCE "public"."subjects_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."subjects_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."subjects_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."teachers_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."teachers_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."teachers_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."year_group_subjects" TO "anon";
GRANT ALL ON TABLE "public"."year_group_subjects" TO "authenticated";
GRANT ALL ON TABLE "public"."year_group_subjects" TO "service_role";



GRANT ALL ON SEQUENCE "public"."year_group_subject_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."year_group_subject_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."year_group_subject_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."year_groups" TO "anon";
GRANT ALL ON TABLE "public"."year_groups" TO "authenticated";
GRANT ALL ON TABLE "public"."year_groups" TO "service_role";



GRANT ALL ON SEQUENCE "public"."year_groups_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."year_groups_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."year_groups_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























RESET ALL;

  create policy "Enable insert for authenticated users only"
  on "storage"."buckets"
  as permissive
  for insert
  to authenticated
with check (true);



  create policy "Allow authenticated users to upload images gxiyis_0"
  on "storage"."objects"
  as permissive
  for insert
  to public
with check ((bucket_id = 'barrowford-school-uploads'::text));



  create policy "Give users access to own folder gxiyis_0"
  on "storage"."objects"
  as permissive
  for select
  to public
using (((bucket_id = 'barrowford-school-uploads'::text) AND (( SELECT (auth.uid())::text AS uid) = (storage.foldername(name))[1])));



  create policy "Give users access to own folder gxiyis_1"
  on "storage"."objects"
  as permissive
  for insert
  to public
with check (((bucket_id = 'barrowford-school-uploads'::text) AND (( SELECT (auth.uid())::text AS uid) = (storage.foldername(name))[1])));



  create policy "Give users access to own folder gxiyis_2"
  on "storage"."objects"
  as permissive
  for update
  to public
using (((bucket_id = 'barrowford-school-uploads'::text) AND (( SELECT (auth.uid())::text AS uid) = (storage.foldername(name))[1])));



  create policy "Give users access to own folder gxiyis_3"
  on "storage"."objects"
  as permissive
  for delete
  to public
using (((bucket_id = 'barrowford-school-uploads'::text) AND (( SELECT (auth.uid())::text AS uid) = (storage.foldername(name))[1])));



  create policy "Give users authenticated access to folder gxiyis_0"
  on "storage"."objects"
  as permissive
  for insert
  to public
with check (((bucket_id = 'barrowford-school-uploads'::text) AND ((storage.foldername(name))[1] = 'private'::text) AND (auth.role() = 'authenticated'::text)));



